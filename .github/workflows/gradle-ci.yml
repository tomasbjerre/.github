name: Gradle CI

on: [workflow_call, push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        java: [ '8', '11', '17' ]
        #os: [ 'ubuntu-latest', 'macos-latest', 'windows-latest' ]
        os: [ 'ubuntu-latest' ]
    name: Java ${{ matrix.Java }} (${{ matrix.os }})
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: "Setup Git"
        shell: bash
        run: |
          git branch -a
          for branch in $(
            git branch -a \
              | grep '^\s*remotes' \
              | egrep --invert-match '(:?HEAD|remotes/pull/[0-9]+/merge)$' \
              | sed -e "s/^.*remotes\/origin\///"
          ); do
              echo setting up $branch
              git checkout $branch
              git checkout -
          done
          git branch -a
          git remote remove origin
          git remote add origin git@github.com:${GITHUB_REPOSITORY}.git
          git remote -v
      - name: Setup java
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java }}
      - name: prepare Gradle
        shell: bash
        run: |
          mkdir -p ~/.gradle && echo "org.gradle.daemon=false" >> ~/.gradle/gradle.properties
      - name: "Gradle build"
        shell: bash
        run: |
          java -version
          javac -version
          ./gradlew --no-daemon build -s
      - name: Publish Build
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: build-${{ github.run_number }}-${{ matrix.os }}-${{ matrix.java }}
          path: ${{ github.workspace }}

      - run: |
          npx violations-command-line -sarif sarif-report.json \
          -v "FINDBUGS" "." ".*spotbugs/main\.xml$" "Spotbugs" \
          -v "CHECKSTYLE" "." ".*checkstyle/main\.xml$" "Checkstyle" \
          -v "PMD" "." ".*pmd/main\.xml$" "PMD"
      - uses: github/codeql-action/upload-sarif@v2
        if: success() || failure()
        with:
          sarif_file: sarif-report.json

      - name: create template
        if: ${{ failure() && (github.event_name == 'pull_request' || github.head_ref != github.base_ref) }} # if it is a PR build
        shell: bash
        run: |
          VIOLATION_TEMPLATE=$(cat << EOF
          {{violation.message}}
          EOF
          )
          echo "VIOLATION_TEMPLATE<<EOF" >> $GITHUB_ENV
          echo "$VIOLATION_TEMPLATE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Spotbugs
        if: ${{ failure() && (github.event_name == 'pull_request' || github.head_ref != github.base_ref) }} # if it is a PR build
        uses: tomasbjerre/violation-comments-action@master
        with:
          parser: FINDBUGS
          regexp: '.*spotbugs/main\.xml$'
          keepOldComments: false
          commentTemplate: ${{ env.VIOLATION_TEMPLATE }}
      - name: Checkstyle
        if: ${{ failure() && (github.event_name == 'pull_request' || github.head_ref != github.base_ref) }} # if it is a PR build
        uses: tomasbjerre/violation-comments-action@master
        with:
          parser: CHECKSTYLE
          regexp: '.*checkstyle/main\.xml$'
          keepOldComments: true
          commentTemplate: ${{ env.VIOLATION_TEMPLATE }}
      - name: PMD
        if: ${{ failure() && (github.event_name == 'pull_request' || github.head_ref != github.base_ref) }} # if it is a PR build
        uses: tomasbjerre/violation-comments-action@master
        with:
          parser: PMD
          regexp: '.*pmd/main\.xml$'
          keepOldComments: true
          commentTemplate: ${{ env.VIOLATION_TEMPLATE }}
      - name: JUNIT
        if: ${{ failure() && (github.event_name == 'pull_request' || github.head_ref != github.base_ref) }} # if it is a PR build
        uses: tomasbjerre/violation-comments-action@master
        with:
          parser: JUNIT
          regexp: '.*test/TEST-.*\.xml$'
          keepOldComments: false
          commentOnlyChangedContent: false
          commentOnlyChangedFiles: false
          createSingleFileComments: false
          createCommentWithAllSingleFileComments: true
          commentTemplate: '{{{violation.message}}}'
